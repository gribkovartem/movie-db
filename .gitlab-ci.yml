stages:
  - linting
  - build
  - deploy

run-eslint:
  image: node:18
  stage: linting
  script:
    - npm install
    - npm run lint

build-images:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  stage: build
  script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker compose build
    - docker compose push

deploy-prod:
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - ssh-keyscan ${HOST} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client wget gnupg -y )'
    # - wget -qO- https://get.docker.com/gpg | apt-key add -
    # - eval $(ssh-agent -s)
    # - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # - mkdir -p ~/.ssh
    # - touch ~/.ssh/config
    # - touch ~/.ssh/known_hosts
    # - chmod -R 400 ~/.ssh
    # - ssh-keyscan ${HOST} >> ~/.ssh/known_hosts
    # - '[[ -f /.dockerinit ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh ${USER}@${HOST} "cd ~/projects/movie-db; git pull origin master; docker compose down; docker compose up -d"